generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  email              String               @unique
  passwordHash       String               @map("password_hash")
  firstName          String?              @map("first_name")
  lastName           String?              @map("last_name")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  deletedAt          DateTime?            @map("deleted_at")
  isActive           Boolean              @default(true) @map("is_active")
  role               Role                 @default(USER)
  addresses          Address[]
  cart               Cart?
  orders             Order[]
  cards              Card[]
  favorites          Favorite[]
  reviews            Review[]
  CouponUser         CouponUser[]
  CouponUsageHistory CouponUsageHistory[]

  @@map("users")
}

model Favorite {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Order {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @db.Uuid
  orderNumber    String      @unique
  totalAmount    Decimal     @db.Decimal(10, 2)
  totalVatAmount Decimal     @map("total_vat") @db.Decimal(10, 2)
  phone          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?   @map("deleted_at")
  user           User        @relation(fields: [userId], references: [id])
  items          OrderItem[]
  invoices       Invoice[]

  addressId    String?  @db.Uuid
  address      Address? @relation(fields: [addressId], references: [id])
  addressTitle String?  @map("address_title")
  fullName     String?  @map("full_name")
  fullAddress  String?  @map("full_address")
  city         String?
  district     String?
  neighborhood String?

  cardId             String?              @db.Uuid
  card               Card?                @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardHolderName     String?              @map("card_holder_name")
  cardNumber         String?              @map("card_number")
  cardBrand          String?              @map("card_brand")
  cardType           String?              @map("card_type")
  cardIssuer         String?              @map("cart_issuer")
  expiryMonth        Int?                 @map("expiry_month")
  expiryYear         Int?                 @map("expiry_year")
  cvv                String?              @map("cvv")
  Coupon             Coupon?              @relation(fields: [couponId], references: [id])
  couponId           String?              @db.Uuid
  CouponUsageHistory CouponUsageHistory[]

  @@map("orders")
}

model Invoice {
  id            String        @id @default(uuid()) @db.Uuid
  orderId       String        @map("order_id") @db.Uuid
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  storeId       String        @map("store_id") @db.Uuid
  store         Store         @relation(fields: [storeId], references: [id])
  invoiceNumber String        @unique @map("invoice_number")
  amount        Decimal       @db.Decimal(10, 2)
  taxAmount     Decimal       @map("tax_amount") @db.Decimal(10, 2)
  taxRate       Float         @map("tax_rate")
  status        InvoiceStatus @default(ISSUED)
  pdfUrl        String?       @map("pdf_url")
  issuedAt      DateTime?     @map("issued_at")
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  items         InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String    @id @default(uuid()) @db.Uuid
  invoiceId   String    @map("invoice_id") @db.Uuid
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  orderItemId String    @map("order_item_id") @db.Uuid
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  description String
  quantity    Int
  unitPrice   Decimal   @map("unit_price") @db.Decimal(10, 2)
  totalPrice  Decimal   @map("total_price") @db.Decimal(10, 2)
  taxAmount   Decimal   @map("tax_amount") @db.Decimal(10, 2)
  vatRate     Decimal   @map("vat_rate") @db.Decimal(5, 2)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("invoice_items")
}

model Card {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  cardHolderName String    @map("card_holder_name")
  cardNumber     String    @map("card_number")
  expiryMonth    Int       @map("expiry_month")
  expiryYear     Int       @map("expiry_year")
  cvv            String    @map("cvv")
  isDefault      Boolean   @default(false) @map("is_default")
  cardBrand      String    @map("card_brand")
  cardType       String    @map("card_type")
  cardIssuer     String    @map("cart_issuer")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order          Order[]
  deletedAt      DateTime? @map("deleted_at")

  @@map("cards")
}

model OrderItem {
  id           String          @id @default(uuid()) @db.Uuid
  orderId      String          @db.Uuid
  productId    String          @db.Uuid
  variantId    String?         @db.Uuid
  productName  String
  variantName  String?
  quantity     Int
  price        Decimal         @db.Decimal(10, 2)
  vatRate      Decimal         @db.Decimal(5, 2)
  vatPrice     Decimal         @db.Decimal(10, 2)
  storeId      String          @db.Uuid
  imageUrl     String?
  status       OrderStatus     @default(PENDING)
  invoiceItems InvoiceItem[]
  createdAt    DateTime        @default(now())
  deletedAt    DateTime?       @map("deleted_at")
  order        Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product         @relation(fields: [productId], references: [id])
  variant      ProductVariant? @relation(fields: [variantId], references: [id])
  store        Store           @relation(fields: [storeId], references: [id])
  Review       Review?

  @@map("order_items")
}

model Address {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  addressTitle String?   @map("address_title")
  fullName     String?   @map("full_name")
  phone        String?
  city         String?
  district     String?
  neighborhood String?
  fullAddress  String?   @map("full_address")
  isDefault    Boolean   @default(false) @map("is_default")
  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")
  user         User      @relation(fields: [userId], references: [id])
  Order        Order[]

  @@map("addresses")
}

model Store {
  id             String      @id @default(uuid()) @db.Uuid
  email          String      @unique
  password       String
  name           String      @unique
  ownerEmail     String      @map("owner_email")
  ownerPhone     String      @map("owner_phone")
  ownerFirstName String      @map("owner_first_name")
  ownerLastName  String      @map("owner_last_name")
  companyTypeId  Int         @map("company_type_id")
  taxNumber      String      @unique
  companyName    String?
  taxOffice      String
  iban           String
  address        String
  phone          String
  status         StoreStatus @default(APPROVED)
  createdAt      DateTime    @default(now())
  deletedAt      DateTime?   @map("deleted_at")
  products       Product[]
  companyType    CompanyType @relation(fields: [companyTypeId], references: [id])
  orders         OrderItem[]
  invoices       Invoice[]
  Coupon         Coupon[]

  @@map("stores")
}

// Existing schema content...

// Coupon model
model Coupon {
  id             String     @id @default(uuid()) @db.Uuid
  code           String     @unique
  type           CouponType
  value          Decimal    @db.Decimal(10, 2)
  minOrderAmount Decimal?   @db.Decimal(10, 2)
  maxDiscount    Decimal?   @db.Decimal(10, 2)
  startDate      DateTime
  endDate        DateTime
  usageLimit     Int?
  perUserLimit Int?
  usedCount      Int        @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?  @map("deleted_at")
  description    String?

  // Relations
  storeId      String?              @db.Uuid
  store        Store?               @relation(fields: [storeId], references: [id])
  usageHistory CouponUsageHistory[]
  categories   CouponCategory[]
  products     CouponProduct[]
  users        CouponUser[]
  orders       Order[]

  @@map("coupons")
}

// CouponType enum
enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// Join table for coupons and categories
model CouponCategory {
  id         String @id @default(uuid()) @db.Uuid
  couponId   String @db.Uuid
  categoryId String @db.Uuid

  // Relations
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([couponId, categoryId])
  @@map("coupon_categories")
}

// Join table for coupons and products
model CouponProduct {
  id        String @id @default(uuid()) @db.Uuid
  couponId  String @db.Uuid
  productId String @db.Uuid

  // Relations
  coupon  Coupon  @relation(fields: [couponId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([couponId, productId])
  @@map("coupon_products")
}

// Join table for coupons and users (for personalized coupons)
model CouponUser {
  id       String @id @default(uuid()) @db.Uuid
  couponId String @db.Uuid
  userId   String @db.Uuid

  // Relations
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId])
  @@map("coupon_users")
}

model CouponUsageHistory {
  id        String   @id @default(uuid()) @db.Uuid
  couponId  String   @db.Uuid
  userId    String   @db.Uuid
  orderId   String   @db.Uuid
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  coupon Coupon @relation(fields: [couponId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@map("coupon_usage_history")
}

model CompanyType {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  taxRate Float   @map("tax_rate")
  stores  Store[]

  @@map("company_types")
}

model Product {
  id            String             @id @default(uuid()) @db.Uuid
  name          String
  description   String
  brandId       String             @db.Uuid
  price         Decimal            @db.Decimal(10, 2)
  vatRate       Decimal            @db.Decimal(5, 2)
  vatPrice      Decimal            @db.Decimal(10, 2)
  stock         Int                @default(0)
  sku           String             @unique
  barcode       String             @unique
  weight        Float?
  dimensions    String?
  isActive      Boolean            @default(true)
  isFeature     Boolean            @default(false)
  imageUrl      String
  storeId       String             @db.Uuid
  createdAt     DateTime           @default(now())
  deletedAt     DateTime?          @map("deleted_at")
  updatedAt     DateTime           @updatedAt
  attributes    ProductAttribute[]
  categories    ProductCategory[]
  images        ProductImage[]
  variants      ProductVariant[]
  brand         Brand              @relation(fields: [brandId], references: [id])
  store         Store              @relation(fields: [storeId], references: [id])
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  favoritedBy   Favorite[]
  CouponProduct CouponProduct[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  rating    Int
  comment   String
  imageUrls String[]
  createdAt DateTime @default(now()) @map("created_at")

  userId      String @map("user_id") @db.Uuid
  orderItemId String @unique @map("order_item_id") @db.Uuid

  user      User      @relation(fields: [userId], references: [id])
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])

  @@map("reviews")
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  url       String
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Brand {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  products Product[]
  deletedAt DateTime? @map("deleted_at")
  @@map("brands")
}

model ProductAttribute {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  value     String
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

model ProductVariant {
  id        String      @id @default(uuid()) @db.Uuid
  sku       String?     @unique
  name      String
  price     Float?
  vatPrice  Float?
  stock     Int         @default(0)
  imageUrl  String?
  productId String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@map("product_variants")
}

model ProductCategory {
  productId  String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Category {
  id             String            @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  isActive       Boolean           @default(true)
  parentId       String?           @db.Uuid
  level          Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  parent         Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children       Category[]        @relation("CategoryHierarchy")
  products       ProductCategory[]
  deletedAt      DateTime?         @map("deleted_at")
  CouponCategory CouponCategory[]

  @@map("categories")
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @unique @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String          @id @default(uuid()) @db.Uuid
  cartId    String          @db.Uuid
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String          @db.Uuid
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?         @db.Uuid
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int             @default(1)
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

enum StoreStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum Role {
  USER
  STORE
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum InvoiceStatus {
  CREATED
  ISSUED
  PAID
  CANCELLED
  REFUNDED
}
