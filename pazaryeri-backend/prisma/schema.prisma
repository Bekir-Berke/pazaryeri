generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  isActive     Boolean   @default(true) @map("is_active")
  role         Role      @default(USER)
  addresses    Address[]
  cart         Cart?
  orders       Order[]
  cards        Card[]

  @@map("users")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  orderNumber String      @unique
  totalAmount Decimal     @db.Decimal(10, 2)
  address     Address     @relation(fields: [addressId], references: [id])
  phone       String?
  cardId      String      @db.Uuid
  card        Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  addressId   String      @db.Uuid

  @@map("orders")
}

model Card {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  cardHolderName String   @map("card_holder_name")
  cardNumber     String   @map("card_number")
  expiryMonth    Int      @map("expiry_month")
  expiryYear     Int      @map("expiry_year")
  cvv            String   @map("cvv")
  isDefault      Boolean  @default(false) @map("is_default")
  cardType       String   @map("card_type")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order          Order[]

  @@map("cards")
}

model OrderItem {
  id          String          @id @default(uuid()) @db.Uuid
  orderId     String          @db.Uuid
  productId   String          @db.Uuid
  variantId   String?         @db.Uuid
  productName String
  variantName String?
  quantity    Int
  price       Decimal         @db.Decimal(10, 2)
  storeId     String          @db.Uuid
  imageUrl    String?
  status      OrderStatus @default(PROCESSING)
  createdAt   DateTime        @default(now())
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  store       Store           @relation(fields: [storeId], references: [id])

  @@map("order_items")
}

model Address {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  addressTitle String?  @map("address_title")
  fullName     String?  @map("full_name")
  phone        String?
  city         String?
  district     String?
  neighborhood String?
  fullAddress  String?  @map("full_address")
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id])
  Order        Order[]

  @@map("addresses")
}

model Store {
  id             String      @id @default(uuid()) @db.Uuid
  email          String      @unique
  password       String
  name           String      @unique
  ownerEmail     String      @map("owner_email")
  ownerPhone     String      @map("owner_phone")
  ownerFirstName String      @map("owner_first_name")
  ownerLastName  String      @map("owner_last_name")
  companyTypeId  Int         @map("company_type_id")
  taxNumber      String      @unique
  companyName    String?
  taxOffice      String
  iban           String
  address        String
  phone          String
  status         StoreStatus @default(APPROVED)
  createdAt      DateTime    @default(now())
  products       Product[]
  companyType    CompanyType @relation(fields: [companyTypeId], references: [id])
  orders         OrderItem[]

  @@map("stores")
}

model CompanyType {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  taxRate Float   @map("tax_rate")
  stores  Store[]

  @@map("company_types")
}

model Product {
  id          String             @id @default(uuid()) @db.Uuid
  name        String
  description String
  brandId     String             @db.Uuid
  price       Decimal            @db.Decimal(10, 2)
  stock       Int                @default(0)
  sku         String             @unique
  barcode     String             @unique
  weight      Float?
  dimensions  String?
  isActive    Boolean            @default(true)
  isFeature   Boolean            @default(false)
  imageUrl    String
  storeId     String             @db.Uuid
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  attributes  ProductAttribute[]
  categories  ProductCategory[]
  images      ProductImage[]
  variants    ProductVariant[]
  brand       Brand              @relation(fields: [brandId], references: [id])
  store       Store              @relation(fields: [storeId], references: [id])
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  url       String
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Brand {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  products Product[]

  @@map("brands")
}

model ProductAttribute {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  value     String
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

model ProductVariant {
  id        String      @id @default(uuid()) @db.Uuid
  sku       String?     @unique
  name      String
  price     Float?
  stock     Int         @default(0)
  imageUrl  String?
  productId String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@map("product_variants")
}

model ProductCategory {
  productId  String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Category {
  id          String            @id @default(uuid()) @db.Uuid
  name        String
  description String?
  isActive    Boolean           @default(true)
  parentId    String?           @db.Uuid
  level       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]        @relation("CategoryHierarchy")
  products    ProductCategory[]

  @@map("categories")
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @unique @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String          @id @default(uuid()) @db.Uuid
  cartId    String          @db.Uuid
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String          @db.Uuid
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?         @db.Uuid
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int             @default(1)
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

enum StoreStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum Role {
  USER
  STORE
  ADMIN
}

// Sipariş durumunu izlemek için enum
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
